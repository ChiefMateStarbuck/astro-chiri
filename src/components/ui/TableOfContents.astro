---
import { themeConfig } from '@/config'
import type { TOCProps } from '@/types'

const { toc = [] }: TOCProps = Astro.props
---

<div class="toc-container" id="toc">
  <nav class="toc-nav">
    <ul class="toc-list" id="toc-list">
      <!-- Back to top link -->
      <li class="toc-item toc-level-0">
        <a href="#" class="toc-link toc-title" title="Back to top" data-text="Back to top">
          Back to top
        </a>
      </li>

      <!-- TOC items -->
      {
        toc.map((item) => (
          <li class={`toc-item toc-level-${item.level}`}>
            <a href={`#${item.id}`} class="toc-link" title={item.text} data-text={item.text}>
              {item.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<script
  is:inline
  define:vars={{
    contentWidth: themeConfig.general.contentWidth,
    centeredLayout: themeConfig.general.centeredLayout,
    toc: themeConfig.post.toc
  }}
>
  ;(function () {
    let tocContainer = null
    let tocLinks = null
    let headings = null
    let titleLink = null
    const headingMap = new Map()
    let scrollTimeout = null

    // Initialize DOM cache
    function initDOMCache() {
      tocContainer = document.querySelector('.toc-container')
      if (!tocContainer) return false

      tocLinks = document.querySelectorAll('.toc-link')
      headings = document.querySelectorAll('h1, h2, h3')
      titleLink = document.querySelector('.toc-link.toc-title')
      buildHeadingMap()
      return true
    }

    // Build heading map for efficient lookup
    function buildHeadingMap() {
      headingMap.clear()
      if (!tocLinks) return

      tocLinks.forEach((link) => {
        const href = link.getAttribute('href')
        if (href && href.startsWith('#')) {
          const id = href.substring(1)
          headingMap.set(id, link)
        }
      })
    }

    // Calculate TOC positioning
    function adjustTOCPosition() {
      if (!tocContainer || !centeredLayout) {
        if (tocContainer) tocContainer.style.display = 'none'
        return
      }

      const pageWidth = window.innerWidth
      const contentWidthValue = parseFloat(contentWidth)
      const widthValue = Math.min(contentWidthValue, 50)
      const finalWidthValue = widthValue > 25 ? widthValue : 25
      const margin = (pageWidth - finalWidthValue * 16) / 2
      const minSpace = toc ? 216 : 176 // 11rem + 40px if toc enabled

      if (margin >= minSpace) {
        tocContainer.style.display = 'block'
        tocContainer.classList.add('fixed-position')
        const leftPosition = toc ? margin - 176 - 40 : margin - 176
        tocContainer.style.left = `${leftPosition}px`
        setTimeout(updateActiveTOCItem, 100)
      } else {
        tocContainer.style.display = 'none'
        tocContainer.classList.remove('fixed-position')
        tocContainer.style.left = ''
      }
    }

    // Check if TOC should be visible based on content
    function checkTOCVisibility() {
      if (!tocContainer || !tocLinks) return

      const tocItems = Array.from(tocLinks).filter((link) => !link.classList.contains('toc-title'))
      if (tocItems.length === 0) {
        tocContainer.style.display = 'none'
      }
    }

    // Handle TOC click events
    function handleTOCClick(e) {
      const link = e.target.closest('.toc-link')
      if (!link) return

      e.preventDefault()

      if (link.classList.contains('toc-title')) {
        window.scrollTo({ top: 0, behavior: 'smooth' })
        history.pushState(null, null, '#')
      } else {
        const href = link.getAttribute('href')
        if (href && href.startsWith('#')) {
          const targetId = href.substring(1)
          const target = document.getElementById(targetId)
          if (target) {
            const rect = target.getBoundingClientRect()
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop
            const offset = rect.top + scrollTop - 96
            window.scrollTo({ top: offset, behavior: 'smooth' })
            history.pushState(null, null, href)
          }
        }
      }
    }

    // Update active TOC item based on scroll position
    function updateActiveTOCItem() {
      if (!tocLinks || !headings || tocLinks.length === 0 || headings.length === 0) {
        return
      }

      let currentActive = null
      const scrollTop = window.pageYOffset + 100

      headings.forEach((heading, index) => {
        if (index === 0 && heading.tagName === 'H1') return

        const rect = heading.getBoundingClientRect()
        const offsetTop = rect.top + window.pageYOffset

        if (scrollTop >= offsetTop) {
          currentActive = heading.id
        }
      })

      tocLinks.forEach((link) => link.classList.remove('active'))

      if (currentActive && headingMap.has(currentActive)) {
        const activeLink = headingMap.get(currentActive)
        activeLink.classList.add('active')
      } else if (titleLink) {
        titleLink.classList.add('active')
      }
    }

    // Initialize TOC
    function initializeTOC() {
      if (!initDOMCache()) {
        setTimeout(initializeTOC, 100)
        return
      }

      adjustTOCPosition()
      checkTOCVisibility()

      // Add event listeners
      tocContainer.removeEventListener('click', handleTOCClick)
      tocContainer.addEventListener('click', handleTOCClick)

      updateActiveTOCItem()
    }

    // Debounced scroll handler
    function handleScroll() {
      if (scrollTimeout) clearTimeout(scrollTimeout)
      scrollTimeout = setTimeout(updateActiveTOCItem, 16)
    }

    // Initialize
    setTimeout(initializeTOC, 10)

    // Event listeners
    document.addEventListener('astro:page-load', () => {
      tocContainer = null
      setTimeout(initializeTOC, 50)
    })

    window.addEventListener('resize', adjustTOCPosition)
    window.addEventListener('scroll', handleScroll)
  })()
</script>

<style is:global>
  .toc-container {
    width: 12rem;
    position: relative;
    left: -0.175em;
    opacity: 0;
    transition: opacity 0.2s ease-out;
  }

  .toc-container.fixed-position {
    opacity: 1;
    position: fixed;
    top: 12rem;
    margin-top: 0;
    padding-left: 1rem;
    z-index: 10;
    left: auto;
  }

  .toc-nav {
    font-family: var(--font-serif);
    font-size: var(--font-size-s);
    line-height: 1.5;
  }

  .toc-list,
  .toc-list li,
  .toc-item {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .prose .toc-container .toc-list {
    margin-left: 0 !important;
    padding-left: 0 !important;
  }
  .prose .toc-container .toc-list li {
    margin: 0 !important;
    padding: 0 !important;
  }

  .toc-item::before,
  .toc-item::marker {
    display: none;
  }

  .toc-link {
    display: block;
    color: transparent;
    text-decoration: none;
    position: relative;
    padding-left: 0;
    height: 1.125rem;
    width: 100%;
    min-height: 1rem;
    font-size: 0;
    line-height: 1.125rem;
    text-indent: 2rem;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    transition:
      color 0.2s ease-out,
      font-size 0.2s ease-out,
      text-indent 0.2s ease-out;
    cursor: pointer;
  }

  .toc-link::after {
    content: attr(data-text);
    position: absolute;
    left: -0.5rem;
    top: 0;
    font-family: var(--font-sans);
    font-size: var(--font-size-s);
    letter-spacing: var(--spacing-m);
    line-height: 1.125rem;
    color: var(--text-primary);
    opacity: 0;
    transition:
      opacity 0.2s ease-out,
      left 0.2s ease-out;
    pointer-events: none;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    max-width: 100%;
  }

  .toc-link:hover::after {
    opacity: 1;
    left: -0.75rem;
  }

  .toc-level-0 .toc-link:hover::after {
    opacity: 0;
  }

  .toc-level-1 .toc-link:hover::before,
  .toc-level-2 .toc-link:hover::before,
  .toc-level-3 .toc-link:hover::before {
    width: 0.75rem;
    transition: width 0.1s ease-out;
  }

  .toc-link.active {
    color: var(--text-primary);
  }

  /* Horizontal line indicators */
  .toc-level-0 .toc-link::before,
  .toc-level-1 .toc-link::before,
  .toc-level-2 .toc-link::before,
  .toc-level-3 .toc-link::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    width: 2.5rem;
    height: 1px;
    background-color: var(--text-tertiary);
    transform: translateY(-50%);
    opacity: 0.4;
    transition: all 0.1s ease-out;
  }

  .toc-link:hover::before,
  .toc-link.active::before {
    opacity: 0.8;
    background-color: var(--text-primary);
  }

  /* Hide on mobile */
  @media (max-width: 768px) {
    .toc-container {
      display: none !important;
    }
  }
</style>
