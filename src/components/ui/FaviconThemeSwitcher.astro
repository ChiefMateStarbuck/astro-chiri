<script is:inline>
  // Favicon theme switcher for system theme-based favicon updates
  class FaviconThemeSwitcher {
    constructor() {
      this.faviconLink =
        document.querySelector('link[rel="icon"]') ||
        document.querySelector('link[rel="shortcut icon"]') ||
        document.querySelector('link[rel="apple-touch-icon"]')

      if (!this.faviconLink) {
        console.warn('Favicon link not found, skipping theme switcher')
        return
      }

      this.currentColor = null
      this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')

      // Listen for system theme changes
      this.mediaQuery.addEventListener('change', () => this.updateFavicon())

      // Set initial favicon color
      this.updateFavicon()
    }

    updateFavicon() {
      const newColor = this.mediaQuery.matches ? '#ccc' : '#111'

      if (this.currentColor !== newColor) {
        this.currentColor = newColor
        this.updateFaviconColor(newColor)
      }
    }

    async updateFaviconColor(color) {
      try {
        const response = await fetch(this.faviconLink.href)
        if (!response.ok) throw new Error(`HTTP ${response.status}`)

        const svgText = await response.text()
        const parser = new DOMParser()
        const svgDoc = parser.parseFromString(svgText, 'image/svg+xml')
        const path = svgDoc.getElementById('favicon-path')

        if (path) {
          path.setAttribute('fill', color)
          const updatedSvg = new XMLSerializer().serializeToString(svgDoc)
          const blob = new Blob([updatedSvg], { type: 'image/svg+xml' })
          this.faviconLink.href = URL.createObjectURL(blob)
        } else {
          console.warn('Favicon path element not found in SVG')
        }
      } catch (error) {
        console.warn('Failed to update favicon color:', error)
      }
    }
  }

  // Initialize favicon theme switcher
  function init() {
    try {
      new FaviconThemeSwitcher()
    } catch (error) {
      console.warn('Failed to initialize favicon theme switcher:', error)
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init)
  } else {
    init()
  }

  // Re-initialize on Astro page loads
  document.addEventListener('astro:page-load', init)
</script>
